# Ekos Session Analyzer
# Cline Development Rules and Guidelines

## Project Overview
This project is an **astrophotography session analyzer** specifically designed for **Ekos/KStars**. It parses `.analyze` files generated by Ekos and sends comprehensive summaries with **temporal plots** to Discord.

## Project Architecture
```
├── nightly_summary.py              # Main CLI entry point and orchestrator
├── ekos_analyzer.py                # Ekos .analyze file parser and data extractor
├── ekos_discord_formatter.py       # Unified Discord message formatter
├── session_plotter.py              # Temporal plot generation (HFR, guiding, temp)
├── advanced_metrics.py             # Statistical calculations and quality analysis
├── utils.py                        # Config, logging, and Discord utilities
├── config_example.yml              # Complete configuration template
├── Pipfile / Pipfile.lock          # Python dependency management
└── README.md                       # Documentation
```

## Key Features (Current State)
- **3 Report Levels**: minimal, standard, detailed (simplified from 5)
- **Temporal Plotting**: HFR, guiding error, and temperature evolution graphs
- **Advanced Analytics**: Statistical analysis with numpy/scipy (optional)
- **Clean Output**: Removed arbitrary metrics, focus on actionable data
- **Bug-Free Timestamps**: Correctly parses Ekos session start times
- **Discord Integration**: Text summaries + image attachments
- **Dry-Run Mode**: Safe development testing with `--dry-run`

## Technologies and Dependencies

### Core Dependencies
- **Python 3.7+** with Pipenv for virtual environment management
- **YAML** for configuration files (PyYAML)
- **Requests** for Discord webhook communication

### Data Processing
- **NumPy/SciPy** (optional) for advanced statistical calculations
- **matplotlib** for temporal plot generation

### Data Sources
- **Ekos .analyze files** in CSV format with timestamped events
- **KStars/Ekos** integration via analyze directory monitoring

## Development Rules

### 1. Code Organization
- **nightly_summary.py**: CLI interface, argument parsing, orchestration
- **ekos_analyzer.py**: File parsing, data extraction, session aggregation
- **ekos_discord_formatter.py**: Message formatting for all report levels
- **session_plotter.py**: Temporal plot generation with matplotlib
- **advanced_metrics.py**: Statistical calculations and quality analysis
- **utils.py**: Reusable utilities (config, logging, Discord API)

### 2. Ekos Data Handling
- **Format**: CSV-like with event types and timestamps
- **Key Events**: `CaptureComplete`, `GuideStats`, `Temperature`, `AutofocusComplete`
- **Timestamps**: Unix seconds since session start (not absolute time)
- **Error Handling**: Graceful degradation for malformed data
- **Parsing Strategy**: Line-by-line processing with regex validation

### 3. Plotting System
- **Multi-axis plots**: HFR (scatter), guiding error (line), temperature (line)
- **Filter color coding**: Different colors for R, G, B, H, O, S filters
- **Autofocus markers**: Vertical lines indicating focus adjustments
- **Dark theme**: Optimized for Discord's dark mode
- **Output**: PNG format, ~100KB, optimized for Discord attachment limits

### 4. Discord Integration
- **Message Limits**: Respect 2000 character limit per message
- **Formatting**: Use emojis for visual appeal (🔭, 📸, 🌡️, ⭐)
- **Attachments**: Send plots as PNG files alongside text summaries
- **Error Fallback**: Gracefully handle image upload failures

### 5. Configuration Management
- **Required**: `webhook` URL for Discord
- **Optional**: All other parameters have sensible defaults
- **Validation**: Check mandatory parameters at startup
- **Graceful Degradation**: Handle missing optional dependencies
- **Environment**: Support different config files for dev/prod

### 6. Error Handling Philosophy
- **Non-Critical Errors**: Log and continue (don't crash on parsing errors)
- **Critical Errors**: Fail fast with clear error messages
- **User Feedback**: Console output for immediate feedback
- **Debug Mode**: Verbose logging with `--verbose` flag

## Code Standards

### Python Conventions
- **Style**: Follow PEP 8 strictly
- **Documentation**: Docstrings for all public functions and classes
- **Type Hints**: Use for new code, especially function signatures
- **Variable Names**: Descriptive and explicit (`capture_data` not `cd`)
- **Language**: All code and comments in English

### Logging Best Practices
```python
# Appropriate logging levels
logging.debug("Technical details for development")
logging.info("Important user information")
logging.warning("Non-critical issues that should be noted")
logging.error("Errors that prevent normal operation")
```

### Data Processing Standards
- **Timestamps**: Always validate before parsing (handle malformed data)
- **Units**: Be explicit (seconds, pixels, arcseconds, degrees Celsius)
- **Precision**: Round appropriately (temp: 1 decimal, HFR: 2 decimals)
- **Validation**: Check data ranges and sanity (negative HFR = invalid)

## Development Workflow

### Setup and Testing
```bash
# Development environment
pipenv install --dev
pipenv shell

# Install plotting dependencies
pipenv install matplotlib

# ALWAYS test with dry-run first
pipenv run python nightly_summary.py -c config.yml --dry-run

# Verbose testing for debugging
pipenv run python nightly_summary.py -c config.yml --dry-run --verbose

# Test different report levels
echo 'discord_report_level: "minimal"' > config_test.yml
echo 'webhook: "http://test"' >> config_test.yml
pipenv run python nightly_summary.py -c config_test.yml --dry-run
```

### Code Changes
1. **Read existing code** to understand context and architecture
2. **Test locally** with real Ekos data before committing
3. **Verify all report levels** work after changes
4. **Check error handling** with malformed input data
5. **Update documentation** if adding new features

### Adding New Features
- **New Metrics**: Add to `advanced_metrics.py`, format in `ekos_discord_formatter.py`
- **New Plot Types**: Extend `session_plotter.py` with new visualization methods
- **New Event Types**: Update `ekos_analyzer.py` parsing logic
- **New Outputs**: Create new formatter modules (e.g., email, Slack)

## Testing Guidelines

### Required Tests
- **Real Ekos Data**: Test with actual `.analyze` files from KStars
- **Edge Cases**: Empty files, malformed data, missing timestamps
- **All Report Levels**: minimal, standard, detailed
- **Plot Generation**: Verify plots are created and properly formatted
- **Discord Limits**: Ensure messages don't exceed character limits

### Test Data Sources
- Use real Ekos session files from `~/.local/share/kstars/analyze/`
- Test with sessions of different lengths (short/long)
- Include sessions with different filter combinations
- Test with sessions that have errors/aborted captures

## Deployment and Production

### Configuration Security
- **Webhook URLs**: Never log or display in debug output
- **File Paths**: May contain personal information, handle carefully
- **Session Data**: Consider privacy when sharing debug information

### Performance Considerations
- **Large Files**: Ekos files can be several MB for long sessions
- **Memory Usage**: Process data in chunks if memory becomes an issue
- **Plot Generation**: Cache plots to avoid regeneration
- **Network**: Handle Discord API rate limits gracefully

### Ekos Compatibility
- **File Format Evolution**: Ekos may change `.analyze` format in updates
- **Version Testing**: Test with current KStars/Ekos versions
- **Backward Compatibility**: Maintain support for older file formats
- **Documentation**: Track format changes and version compatibility

## Dependencies and Optional Features

### Graceful Degradation
- **matplotlib missing**: Disable plot generation, continue with text reports
- **numpy/scipy missing**: Use basic statistics instead of advanced analytics
- **Network issues**: Provide clear error messages for Discord connectivity

### Version Requirements
- **Python**: 3.7+ (for f-strings and typing support)
- **matplotlib**: Any recent version for plotting
- **numpy/scipy**: Required only for detailed report level

## External Resources and Documentation
- [Ekos Documentation](https://docs.kde.org/trunk5/en/kstars/kstars/ekos.html)
- [Discord Webhooks API](https://discord.com/developers/docs/resources/webhook)
- [KStars GitHub Repository](https://invent.kde.org/education/kstars)
- [matplotlib Documentation](https://matplotlib.org/stable/)
- [Python Pipenv Guide](https://pipenv.pypa.io/en/latest/)

## Report Level Guide

### 🔹 MINIMAL
- **Use Case**: Automated monitoring, quick alerts
- **Length**: 3-5 lines maximum
- **Content**: Essential metrics only (total captures, critical issues)
- **Analytics**: None required
- **Best For**: Continuous monitoring systems, mobile notifications

### 🔹 STANDARD (Default)
- **Use Case**: Regular session summaries for enthusiasts
- **Length**: 10-15 lines, balanced information
- **Content**: Session overview, capture details, basic conditions
- **Analytics**: Basic statistics (min/max/avg)
- **Best For**: Most astrophotographers, daily use

### 🔹 DETAILED
- **Use Case**: In-depth analysis for data enthusiasts
- **Length**: 20+ lines with comprehensive analysis
- **Content**: Full statistical analysis, correlations, quality metrics
- **Analytics**: Advanced (requires numpy/scipy)
- **Best For**: Equipment optimization, session analysis, troubleshooting

## Quick Reference Commands
```bash
# Development
pipenv run python nightly_summary.py -c config.yml --dry-run --verbose

# Production
pipenv run python nightly_summary.py -c config.yml

# Different levels
# Minimal: discord_report_level: "minimal"
# Standard: discord_report_level: "standard" (default)
# Detailed: discord_report_level: "detailed" (auto-enables advanced analytics)

# Enable/disable plots
# plotting: { enabled: true }    # Generate plots (default)
# plotting: { enabled: false }   # Text only
```

## Recent Improvements
- ✅ **Fixed timestamp parsing bug** (was showing wrong session times)
- ✅ **Removed arbitrary quality scores** (focused on actionable metrics)
- ✅ **Added temporal plotting system** (HFR, guiding, temperature evolution)
- ✅ **Simplified report levels** (removed confusing expert/custom modes)
- ✅ **Improved Discord integration** (image attachments, better formatting)
- ✅ **Enhanced error handling** (graceful degradation, better user feedback)
